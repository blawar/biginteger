#pragma once

#include "integer.h"

void printNumber(word n)
{
	if (n < 1000)
	{
		printf("%d", n);
		return;
	}
	printNumber(n / 1000);
	printf(",%03d", n % 1000);
}

integer<8192> rand1 = "\xDE\xCF\xB6\xFC\x3D\x33\xE9\x55\xFD\xAC\x90\xE8\x88\x17\xB0\x03\xA1\x6B\x9A\xAB\x72\x70\x79\x32\xA2\xA0\x8C\xBB\x33\x6F\xB0\x76\x96\x2E\xC4\xE9\x2E\xD8\x8F\x92\xC0\x2D\x4D\x41\x0F\xDE\x45\x1B\x25\x3C\xBE\x37\x6B\x45\x82\x21\xE6\x4D\xB1\x23\x81\x82\xB6\x81\x62\xB7\x30\xF4\x60\x4B\xC7\xF7\xF0\x17\x0C\xB5\x75\x88\x77\x93\x52\x63\x70\xF0\x0B\xC6\x73\x43\x41\xEE\xE4\xF0\x71\xEC\xC8\xC1\x32\xC4\xDC\xA9\x99\x1D\x31\xB8\xA4\x7E\xDD\x19\x04\x0F\x02\xA8\x1A\xAF\xB3\x48\x9A\x29\x29\x5E\x49\x84\xE0\x94\x11\xD1\x7E\xAB\xB2\xC0\x44\x7E\xA1\x1B\x5E\x9D\x0D\x1A\xF9\x02\x9A\x2E\x53\x03\x2D\x48\x96\x7C\x2C\xA6\xD7\xAC\xF1\xED\x2B\x18\xBB\x01\xCB\x13\xB9\xAC\xA6\xEE\x55\x00\x37\x7C\x69\x61\x62\x89\x01\x54\x77\x9F\x07\x5D\x26\x34\x3A\xA9\x49\xA5\xAF\xF2\x5E\x06\x51\xB7\x1C\xE0\xDE\xDA\x5C\x0B\x9F\x98\xC2\x15\xFD\xBA\xD8\xA9\x99\x00\xAB\xA4\x8E\x4A\x16\x9D\x66\x2A\xE8\x56\x64\xB2\xB6\xC0\x93\xAF\x4D\x38\xA0\x16\x5C\xE4\xBD\x62\xC2\x46\x6B\xC9\x5A\x59\x4A\x72\x58\xFD\xB2\xCC\x36\x87\x30\x85\xE8\xA1\x04\x5B\xE0\x17\x9B\xD0\xEC\x9B\xDE\xCF\xB6\xFC\x3D\x33\xE9\x55\xFD\xAC\x90\xE8\x88\x17\xB0\x03\xA1\x6B\x9A\xAB\x72\x70\x79\x32\xA2\xA0\x8C\xBB\x33\x6F\xB0\x76\x96\x2E\xC4\xE9\x2E\xD8\x8F\x92\xC0\x2D\x4D\x41\x0F\xDE\x45\x1B\x25\x3C\xBE\x37\x6B\x45\x82\x21\xE6\x4D\xB1\x23\x81\x82\xB6\x81\x62\xB7\x30\xF4\x60\x4B\xC7\xF7\xF0\x17\x0C\xB5\x75\x88\x77\x93\x52\x63\x70\xF0\x0B\xC6\x73\x43\x41\xEE\xE4\xF0\x71\xEC\xC8\xC1\x32\xC4\xDC\xA9\x99\x1D\x31\xB8\xA4\x7E\xDD\x19\x04\x0F\x02\xA8\x1A\xAF\xB3\x48\x9A\x29\x29\x5E\x49\x84\xE0\x94\x11\xD1\x7E\xAB\xB2\xC0\x44\x7E\xA1\x1B\x5E\x9D\x0D\x1A\xF9\x02\x9A\x2E\x53\x03\x2D\x48\x96\x7C\x2C\xA6\xD7\xAC\xF1\xED\x2B\x18\xBB\x01\xCB\x13\xB9\xAC\xA6\xEE\x55\x00\x37\x7C\x69\x61\x62\x89\x01\x54\x77\x9F\x07\x5D\x26\x34\x3A\xA9\x49\xA5\xAF\xF2\x5E\x06\x51\xB7\x1C\xE0\xDE\xDA\x5C\x0B\x9F\x98\xC2\x15\xFD\xBA\xD8\xA9\x99\x00\xAB\xA4\x8E\x4A\x16\x9D\x66\x2A\xE8\x56\x64\xB2\xB6\xC0\x93\xAF\x4D\x38\xA0\x16\x5C\xE4\xBD\x62\xC2\x46\x6B\xC9\x5A\x59\x4A\x72\x58\xFD\xB2\xCC\x36\x87\x30\x85\xE8\xA1\x04\x5B\xE0\x17\x9B\xD0\xEC\x9B\xDE\xCF\xB6\xFC\x3D\x33\xE9\x55\xFD\xAC\x90\xE8\x88\x17\xB0\x03\xA1\x6B\x9A\xAB\x72\x70\x79\x32\xA2\xA0\x8C\xBB\x33\x6F\xB0\x76\x96\x2E\xC4\xE9\x2E\xD8\x8F\x92\xC0\x2D\x4D\x41\x0F\xDE\x45\x1B\x25\x3C\xBE\x37\x6B\x45\x82\x21\xE6\x4D\xB1\x23\x81\x82\xB6\x81\x62\xB7\x30\xF4\x60\x4B\xC7\xF7\xF0\x17\x0C\xB5\x75\x88\x77\x93\x52\x63\x70\xF0\x0B\xC6\x73\x43\x41\xEE\xE4\xF0\x71\xEC\xC8\xC1\x32\xC4\xDC\xA9\x99\x1D\x31\xB8\xA4\x7E\xDD\x19\x04\x0F\x02\xA8\x1A\xAF\xB3\x48\x9A\x29\x29\x5E\x49\x84\xE0\x94\x11\xD1\x7E\xAB\xB2\xC0\x44\x7E\xA1\x1B\x5E\x9D\x0D\x1A\xF9\x02\x9A\x2E\x53\x03\x2D\x48\x96\x7C\x2C\xA6\xD7\xAC\xF1\xED\x2B\x18\xBB\x01\xCB\x13\xB9\xAC\xA6\xEE\x55\x00\x37\x7C\x69\x61\x62\x89\x01\x54\x77\x9F\x07\x5D\x26\x34\x3A\xA9\x49\xA5\xAF\xF2\x5E\x06\x51\xB7\x1C\xE0\xDE\xDA\x5C\x0B\x9F\x98\xC2\x15\xFD\xBA\xD8\xA9\x99\x00\xAB\xA4\x8E\x4A\x16\x9D\x66\x2A\xE8\x56\x64\xB2\xB6\xC0\x93\xAF\x4D\x38\xA0\x16\x5C\xE4\xBD\x62\xC2\x46\x6B\xC9\x5A\x59\x4A\x72\x58\xFD\xB2\xCC\x36\x87\x30\x85\xE8\xA1\x04\x5B\xE0\x17\x9B\xD0\xEC\x9B\xDE\xCF\xB6\xFC\x3D\x33\xE9\x55\xFD\xAC\x90\xE8\x88\x17\xB0\x03\xA1\x6B\x9A\xAB\x72\x70\x79\x32\xA2\xA0\x8C\xBB\x33\x6F\xB0\x76\x96\x2E\xC4\xE9\x2E\xD8\x8F\x92\xC0\x2D\x4D\x41\x0F\xDE\x45\x1B\x25\x3C\xBE\x37\x6B\x45\x82\x21\xE6\x4D\xB1\x23\x81\x82\xB6\x81\x62\xB7\x30\xF4\x60\x4B\xC7\xF7\xF0\x17\x0C\xB5\x75\x88\x77\x93\x52\x63\x70\xF0\x0B\xC6\x73\x43\x41\xEE\xE4\xF0\x71\xEC\xC8\xC1\x32\xC4\xDC\xA9\x99\x1D\x31\xB8\xA4\x7E\xDD\x19\x04\x0F\x02\xA8\x1A\xAF\xB3\x48\x9A\x29\x29\x5E\x49\x84\xE0\x94\x11\xD1\x7E\xAB\xB2\xC0\x44\x7E\xA1\x1B\x5E\x9D\x0D\x1A\xF9\x02\x9A\x2E\x53\x03\x2D\x48\x96\x7C\x2C\xA6\xD7\xAC\xF1\xED\x2B\x18\xBB\x01\xCB\x13\xB9\xAC\xA6\xEE\x55\x00\x37\x7C\x69\x61\x62\x89\x01\x54\x77\x9F\x07\x5D\x26\x34\x3A\xA9\x49\xA5\xAF\xF2\x5E\x06\x51\xB7\x1C\xE0\xDE\xDA\x5C\x0B\x9F\x98\xC2\x15\xFD\xBA\xD8\xA9\x99\x00\xAB\xA4\x8E\x4A\x16\x9D\x66\x2A\xE8\x56\x64\xB2\xB6\xC0\x93\xAF\x4D\x38\xA0\x16\x5C\xE4\xBD\x62\xC2\x46\x6B\xC9\x5A\x59\x4A\x72\x58\xFD\xB2\xCC\x36\x87\x30\x85\xE8\xA1\x04\x5B\xE0\x17\x9B\xD0\xEC\x9B";
integer<8192> rand2 = "\xC2\x6E\xAA\xCE\xDD\x4F\xF3\x1C\xD9\x70\x26\x2B\x2A\x6B\xE0\x6D\x5C\xEC\x11\x15\x52\x8C\xAA\x6F\x00\xBA\xDA\x3A\x6B\x9A\x88\x6B\x5E\x35\xDE\x4F\xB7\xE9\xE4\x35\x6C\x4B\x06\xB3\x10\xCC\xA1\x5A\xED\x2B\x7B\x43\x3D\xAB\x68\x1B\x03\x66\xCC\x3C\x76\x9F\x6D\x35\x79\xE6\xB8\x16\xA8\xF0\x1B\xE9\xC5\x8C\x1A\x61\xA5\xAB\x81\x7E\x2C\x2F\xC5\x5C\x8C\x70\xF5\x84\xD8\xD4\x85\xE7\x55\x84\xD7\x1A\x0E\xA1\xA6\x09\x27\x51\xDB\xE6\xBC\xBB\xE3\xC1\x19\xA4\xCB\xA5\xE3\x83\xE7\x40\x81\x31\x29\xAA\x4E\x9C\xB4\x9D\xD3\x96\xBB\x7F\x97\xF3\x32\xFA\xA2\x4F\x0A\x4B\xCB\xC3\x62\xE3\x4D\x4F\x09\xF1\x39\x5B\x56\x5C\xC6\x15\x3D\x37\xF0\x57\xA0\x49\x68\x86\xE6\x6E\x96\x5B\xE0\x8A\x10\x30\xEA\x03\x8B\xC4\x5D\xDF\x6D\x4F\x52\x7F\x3E\xD4\x1E\x25\x45\xC0\xE4\x77\x2E\xA6\xA3\xF9\x7D\xD2\xA0\xC7\x0D\x34\x07\x69\xE8\xAF\x21\x1C\xD1\xEE\xB5\x04\xA9\x6C\x70\xB4\xDE\x40\xAD\x14\x6B\xF6\x3F\x50\x9F\xD5\x6A\x55\x35\x82\x11\xCC\x27\xA9\x69\x14\x76\x9E\x50\x86\x4F\xF4\xEE\xA2\x45\xA5\xFF\xA9\x52\x65\xD5\x73\x3E\xDB\x0D\x33\xD9\xD1\x60\x2F\x5F\x3C\xC8\xE6\xC2\x6E\xAA\xCE\xDD\x4F\xF3\x1C\xD9\x70\x26\x2B\x2A\x6B\xE0\x6D\x5C\xEC\x11\x15\x52\x8C\xAA\x6F\x00\xBA\xDA\x3A\x6B\x9A\x88\x6B\x5E\x35\xDE\x4F\xB7\xE9\xE4\x35\x6C\x4B\x06\xB3\x10\xCC\xA1\x5A\xED\x2B\x7B\x43\x3D\xAB\x68\x1B\x03\x66\xCC\x3C\x76\x9F\x6D\x35\x79\xE6\xB8\x16\xA8\xF0\x1B\xE9\xC5\x8C\x1A\x61\xA5\xAB\x81\x7E\x2C\x2F\xC5\x5C\x8C\x70\xF5\x84\xD8\xD4\x85\xE7\x55\x84\xD7\x1A\x0E\xA1\xA6\x09\x27\x51\xDB\xE6\xBC\xBB\xE3\xC1\x19\xA4\xCB\xA5\xE3\x83\xE7\x40\x81\x31\x29\xAA\x4E\x9C\xB4\x9D\xD3\x96\xBB\x7F\x97\xF3\x32\xFA\xA2\x4F\x0A\x4B\xCB\xC3\x62\xE3\x4D\x4F\x09\xF1\x39\x5B\x56\x5C\xC6\x15\x3D\x37\xF0\x57\xA0\x49\x68\x86\xE6\x6E\x96\x5B\xE0\x8A\x10\x30\xEA\x03\x8B\xC4\x5D\xDF\x6D\x4F\x52\x7F\x3E\xD4\x1E\x25\x45\xC0\xE4\x77\x2E\xA6\xA3\xF9\x7D\xD2\xA0\xC7\x0D\x34\x07\x69\xE8\xAF\x21\x1C\xD1\xEE\xB5\x04\xA9\x6C\x70\xB4\xDE\x40\xAD\x14\x6B\xF6\x3F\x50\x9F\xD5\x6A\x55\x35\x82\x11\xCC\x27\xA9\x69\x14\x76\x9E\x50\x86\x4F\xF4\xEE\xA2\x45\xA5\xFF\xA9\x52\x65\xD5\x73\x3E\xDB\x0D\x33\xD9\xD1\x60\x2F\x5F\x3C\xC8\xE6\xC2\x6E\xAA\xCE\xDD\x4F\xF3\x1C\xD9\x70\x26\x2B\x2A\x6B\xE0\x6D\x5C\xEC\x11\x15\x52\x8C\xAA\x6F\x00\xBA\xDA\x3A\x6B\x9A\x88\x6B\x5E\x35\xDE\x4F\xB7\xE9\xE4\x35\x6C\x4B\x06\xB3\x10\xCC\xA1\x5A\xED\x2B\x7B\x43\x3D\xAB\x68\x1B\x03\x66\xCC\x3C\x76\x9F\x6D\x35\x79\xE6\xB8\x16\xA8\xF0\x1B\xE9\xC5\x8C\x1A\x61\xA5\xAB\x81\x7E\x2C\x2F\xC5\x5C\x8C\x70\xF5\x84\xD8\xD4\x85\xE7\x55\x84\xD7\x1A\x0E\xA1\xA6\x09\x27\x51\xDB\xE6\xBC\xBB\xE3\xC1\x19\xA4\xCB\xA5\xE3\x83\xE7\x40\x81\x31\x29\xAA\x4E\x9C\xB4\x9D\xD3\x96\xBB\x7F\x97\xF3\x32\xFA\xA2\x4F\x0A\x4B\xCB\xC3\x62\xE3\x4D\x4F\x09\xF1\x39\x5B\x56\x5C\xC6\x15\x3D\x37\xF0\x57\xA0\x49\x68\x86\xE6\x6E\x96\x5B\xE0\x8A\x10\x30\xEA\x03\x8B\xC4\x5D\xDF\x6D\x4F\x52\x7F\x3E\xD4\x1E\x25\x45\xC0\xE4\x77\x2E\xA6\xA3\xF9\x7D\xD2\xA0\xC7\x0D\x34\x07\x69\xE8\xAF\x21\x1C\xD1\xEE\xB5\x04\xA9\x6C\x70\xB4\xDE\x40\xAD\x14\x6B\xF6\x3F\x50\x9F\xD5\x6A\x55\x35\x82\x11\xCC\x27\xA9\x69\x14\x76\x9E\x50\x86\x4F\xF4\xEE\xA2\x45\xA5\xFF\xA9\x52\x65\xD5\x73\x3E\xDB\x0D\x33\xD9\xD1\x60\x2F\x5F\x3C\xC8\xE6\xC2\x6E\xAA\xCE\xDD\x4F\xF3\x1C\xD9\x70\x26\x2B\x2A\x6B\xE0\x6D\x5C\xEC\x11\x15\x52\x8C\xAA\x6F\x00\xBA\xDA\x3A\x6B\x9A\x88\x6B\x5E\x35\xDE\x4F\xB7\xE9\xE4\x35\x6C\x4B\x06\xB3\x10\xCC\xA1\x5A\xED\x2B\x7B\x43\x3D\xAB\x68\x1B\x03\x66\xCC\x3C\x76\x9F\x6D\x35\x79\xE6\xB8\x16\xA8\xF0\x1B\xE9\xC5\x8C\x1A\x61\xA5\xAB\x81\x7E\x2C\x2F\xC5\x5C\x8C\x70\xF5\x84\xD8\xD4\x85\xE7\x55\x84\xD7\x1A\x0E\xA1\xA6\x09\x27\x51\xDB\xE6\xBC\xBB\xE3\xC1\x19\xA4\xCB\xA5\xE3\x83\xE7\x40\x81\x31\x29\xAA\x4E\x9C\xB4\x9D\xD3\x96\xBB\x7F\x97\xF3\x32\xFA\xA2\x4F\x0A\x4B\xCB\xC3\x62\xE3\x4D\x4F\x09\xF1\x39\x5B\x56\x5C\xC6\x15\x3D\x37\xF0\x57\xA0\x49\x68\x86\xE6\x6E\x96\x5B\xE0\x8A\x10\x30\xEA\x03\x8B\xC4\x5D\xDF\x6D\x4F\x52\x7F\x3E\xD4\x1E\x25\x45\xC0\xE4\x77\x2E\xA6\xA3\xF9\x7D\xD2\xA0\xC7\x0D\x34\x07\x69\xE8\xAF\x21\x1C\xD1\xEE\xB5\x04\xA9\x6C\x70\xB4\xDE\x40\xAD\x14\x6B\xF6\x3F\x50\x9F\xD5\x6A\x55\x35\x82\x11\xCC\x27\xA9\x69\x14\x76\x9E\x50\x86\x4F\xF4\xEE\xA2\x45\xA5\xFF\xA9\x52\x65\xD5\x73\x3E\xDB\x0D\x33\xD9\xD1\x60\x2F\x5F\x3C\xC8\xE6";


template<size_t BITS>
void benchmark()
{
	printf("...");
	integer<BITS> _sample = rand1;
	integer<BITS> modulus = rand1;
	printf("starting %d benchmark\n", BITS);

	{
		std::chrono::milliseconds start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		unsigned long i;
		for (i = 0; i < 0x100000; i++)
		{
			_sample + modulus;
		}
		std::chrono::milliseconds end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		if ((end - start).count() == 0)
		{
			printf("addition %d ops/sec = infinity\n", BITS);
		}
		else
		{
			printf("addition %d ops/sec = ", BITS);
			printNumber(i * 1000 / (end - start).count());
			printf("\n");
		}
	}

	{
		std::chrono::milliseconds start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		unsigned long i;
		for (i = 0; i < 0x100000; i++)
		{
			_sample - modulus;
		}
		std::chrono::milliseconds end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		if ((end - start).count() == 0)
		{
			printf("subtraction %d ops/sec = infinity\n", BITS);
		}
		else
		{
			printf("subtraction %d ops/sec = ", BITS);
			printNumber(i * 1000 / (end - start).count());
			printf("\n");
		}
	}

	{
		std::chrono::milliseconds start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		unsigned long i;
		for (i = 0; i < 0x100000; i++)
		{
			_sample / modulus;
		}
		std::chrono::milliseconds end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		if ((end - start).count() == 0)
		{
			printf("divide %d ops/sec = infinity\n", BITS);
		}
		else
		{
			printf("divide %d ops/sec = ", BITS);
			printNumber(i * 1000 / (end - start).count());
			printf("\n");
		}
	}

	{
		std::chrono::milliseconds start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		unsigned long i;
		for (i = 0; i < 0x1000; i++)
		{
			_sample.multiply(modulus);
		}
		std::chrono::milliseconds end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		if ((end - start).count() == 0)
		{
			printf("multiply %d ops/sec = infinity\n", BITS);
		}
		else
		{
			printf("multiply %d ops/sec = ", BITS);
			printNumber(i * 1000 / (end - start).count());
			printf("\n");
		}
	}

	{
		std::chrono::milliseconds start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		unsigned long i;
		for (i = 0; i < 0x10000; i++)
		{
			_sample.multiplyKaratsuba(modulus);
		}
		std::chrono::milliseconds end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		if ((end - start).count() == 0)
		{
			printf("multiply %d Karatsuba ops/sec = infinity\n", BITS);
		}
		else
		{
			printf("multiply %d Karatsuba ops/sec = ", BITS);
			printNumber(i * 1000 / (end - start).count());
			printf("\n");
		}
	}
	printf("\n*******************************************\n\n");
}